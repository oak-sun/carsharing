type: edu
custom_name: Welcome, customer!
files:
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    import carsharing.controller.CompanyController;


    public class Main {
        public static void main(String[] args) {
            String dbName = "carsharing.db";

            if (args.length > 0 &&
                    args[0].equals("-databaseFileName")) {
                dbName = args[1];
            }

            CompanyController gui = new CompanyController(dbName);
            gui.run();
        }
    }
  learner_created: false
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CAR table.");
            }
        }

        public void clearCustomerTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CUSTOMER");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CUSTOMER table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table\n" +
                            "Make sure you don't clear the database after starting the program");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' company ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomer(String name, String carName) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM CUSTOMER WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' customer in the 'CUSTOMER' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                if (carName == null) {
                    if (resultSet.getString("RENTED_CAR_ID") != null) {
                        throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should be NULL");
                    }
                    return;
                }

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);
                ResultSet carResultSet = carStatement.executeQuery();

                if (!carResultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                int carId = carResultSet.getInt("ID");

                if (resultSet.getInt("RENTED_CAR_ID") != carId) {
                    throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should reference to the '" + carName + "' car ID.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }


        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomerColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CUSTOMER' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CUSTOMER' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'YES'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table has NOT NULL constraint, but it shouldn't");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table is not FOREIGN KEY. It should refer to 'ID' column of the 'CAR' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("CAR(ID)")) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table doesn't refer to 'ID' column of the 'CAR' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = 1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest(order = 2)
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest(order = 4)
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTest(order = 5)
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();

            String[][] customerColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"RENTED_CAR_ID", "INT"}};
            db.ifColumnsExist("customer", customerColumns);
            db.checkCustomerColumnProperties();
            return correct();
        }

        @DynamicTest(order = 6)
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();
            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected 'Super company' company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected 'Another company' company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected 'One more company' company.\n" +
                    "Your output should contain '2. One more company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTest(order = 7)
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();
            db.clearCustomerTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 8)
        public CheckResult test8_testAddCustomer() {

            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();

            if (!output.contains("2. Log in as a customer")) {
                return wrong("Start menu should contain \"2. Log in as a customer\"");
            }

            if (!output.contains("3. Create a customer")) {
                return wrong("Start menu should contain \"3. Create a customer\"");
            }

            output = program.execute("2");

            if (!output.contains("The customer list is empty!")) {
                return wrong("If no customers were created you should print 'The customer list is empty!'");
            }

            output = program.execute("3");

            if (!output.contains("Enter the customer name:")) {
                return wrong("After choosing '3. Create a customer' option you should ask to enter a customer name.\n" +
                    "Your output should contain 'Enter the customer name:'");
            }

            program.execute("First customer");
            db.checkCustomer("First customer", null);

            program.execute("3");
            output = program.execute("Second customer");
            db.checkCustomer("Second customer", null);

            if (!output.contains("2. Log in as a customer")) {
                return wrong("After creating a customer you should print main menu again.\n" +
                    "Your output should contain '2. Log in as a customer'");
            }

            output = program.execute("2");


            if (!output.contains("1. First customer")) {
                return wrong("In the customer list expected 'First customer' customer.\n" +
                    "Your output should contain '1. First customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            if (!output.contains("2. Second customer")) {
                return wrong("In the customer list expected 'Second customer' customer.\n" +
                    "Your output should contain '2. Second customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("1. Rent a car")) {
                return wrong("After choosing customer you should print menu that contains '1. Rent a car' item");
            }

            if (!output.contains("2. Return a rented car")) {
                return wrong("After choosing customer you should print menu that contains '2. Return a rented car' item");
            }

            if (!output.contains("3. My rented car")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            output = program.execute("3");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '3. My rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            output = program.execute("2");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '2. Return a rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            return correct();
        }

        @DynamicTest(order = 9)
        public CheckResult test9_testRentCar() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            db.checkCustomer("First customer", null);
            db.checkCustomer("Second customer", null);

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            db.checkCar("Drive Now", "Lamborghini Urraco");
            db.checkCar("Car To Go", "Hyundai Venue");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            program.execute("2");
            program.execute("1");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("You rented 'Hyundai Venue'")) {
                return wrong("After renting 'Hyundai Venue' you shoul print 'You rented 'Hyundai Venue'");
            }

            db.checkCustomer("First customer", "Hyundai Venue");

            if (!output.contains("3. My rented car")) {
                return wrong("After renting a car you should print menu that contains '3. My rented car' option.");
            }

            output = program.execute("3");

            if (!output.contains("Hyundai Venue")) {
                return wrong("After choosing '3. My rented car' option expected car name is 'Hyundai Venue'");
            }

            if (!output.contains("Car To Go")) {
                return wrong("After choosing '3. My rented car' option expected company name is 'Car To Go'");
            }

            output = program.execute("1");

            if (!output.contains("You've already rented a car!")) {
                return wrong("If a customer has already rented a car and is trying to rent another one you should print 'You've already rented a car!'");
            }

            output = program.execute("2");

            if (!output.contains("You've returned a rented car!")) {
                return wrong("If a customer has already returned a rented car and is trying to return another one you should print 'You've returned a rented car!'");
            }

            db.checkCustomer("First customer", null);

            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 10)
        public CheckResult test10_testRentedCarInList() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            program.execute("2");
            program.execute("2");
            program.execute("1");
            program.execute("1");
            program.execute("1");
            program.execute("0");

            program.execute("2");
            program.execute("1");
            program.execute("1");

            output = program.execute("1");
            if (output.contains("Hyundai Venue")) {
                return wrong("You shouldn't print out a car if it is already rented!");
            }

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/carsharing/model/Company.java
  visible: true
  text: |-
    package carsharing.model;

    import lombok.*;

    @Getter
    @Setter
    @ToString
    @AllArgsConstructor
    @NoArgsConstructor
    public class Company {
        private int ID;
        private String name;

    }
  learner_created: false
- name: src/carsharing/dao/CompanyDao.java
  visible: true
  text: |-
    package carsharing.dao;

    import carsharing.model.Car;
    import carsharing.model.Company;
    import carsharing.model.Customer;

    import java.util.List;

    public interface CompanyDao {
        public List<Company> getAllCompanies();
        public void addCompany(String name);
        public List<Car> getAllCompanyCars(int carId);
        public void addCar(String name, int companyId);
        public List<Customer> getAllCustomers();
        public void addCustomer(String name);
        public void getRentedCar(Integer customerId);
        public void rentACar(Integer customerId, Integer carId);
        public List<Car> getAllCompanyAvailableCars(int companyId);
        public void returnCar(Integer customerId);
    }
  learner_created: false
- name: src/carsharing/model/Car.java
  visible: true
  text: |
    package carsharing.model;


    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;
    import lombok.ToString;

    @NoArgsConstructor
    @Getter
    @Setter
    @ToString
    public class Car {
        private int ID;
        private String name;
        private int companyId;

    }
  learner_created: false
- name: src/carsharing/controller/Controller.java
  visible: true
  text: |
    package carsharing.controller;

    import carsharing.controller.util.*;
    import carsharing.controller.util.menus.Menu;
    import carsharing.controller.util.menus.MenuImpl;
    import carsharing.controller.util.tasks.*;
    import carsharing.dao.CompanyDao;
    import carsharing.dao.JDBCDao;

    import carsharing.service.ServiceImpl;
    import carsharing.service.Services;
    import lombok.NoArgsConstructor;
    import java.util.HashMap;
    import java.util.Map;

    @NoArgsConstructor
    public class Controller {
        private UtilManager manager;
        private Menu mainMenu;
        private Menu managerMenu;
        private CompanyDao dao;
        private Services services;
        private static Controller instance;

        public static Controller getInstance() {
            if(instance == null) {
                var controller = new Controller();
                controller.wireDependencies();
                instance = controller;
            }
            return instance;
        }


        public void wireDependencies() {
            dao = JDBCDao.getInstance();
            services = new ServiceImpl(dao);
            Task createCompanyTask = new CreateCompany(services);
            Task listCompanyTask = new ListCompany(services);
            final String mainMenuDisplayText = "1. Log in as a manager\n" +
                    "0. Exit";
            final Map<Integer, Task> mainMenuActionMap = new HashMap<>();
            mainMenu = new MenuImpl(mainMenuDisplayText, mainMenuActionMap);

            Task backTask = new Switcher(mainMenu);
            final Map<Integer, Task> managerMenuActionMap = new HashMap<>();
            managerMenuActionMap.put(1, listCompanyTask);
            managerMenuActionMap.put(2, createCompanyTask);
            managerMenuActionMap.put(0, backTask);

            final String managerMenuDisplayText = """
                    1. Company list
                    2. Create a company
                    0. Back""";
            managerMenu = new MenuImpl(managerMenuDisplayText, managerMenuActionMap);
            Task managerLoginAction = new Switcher(managerMenu);
            Task terminateAction = new Close();
            mainMenuActionMap.put(1, managerLoginAction);
            mainMenuActionMap.put(0, terminateAction);
            manager = new UtilManager(mainMenu);
        }

        public UtilManager getDbmTool() {
            return manager;
        }

        public Menu getMainMenu() {
            return mainMenu;
        }

        public Menu getManagerMenu() {
            return managerMenu;
        }

        public CompanyDao getCompanyRepository() {
            return dao;
        }

        public Services getCompanyService() {
            return services;
        }
    }
  learner_created: true
- name: src/carsharing/controller/util/tasks/Task.java
  visible: true
  text: |
    package carsharing.controller.util.tasks;

    import carsharing.controller.util.UtilManager;

    public interface Task {
        void perform(UtilManager manager);
    }
  learner_created: true
- name: src/carsharing/controller/util/UtilManager.java
  visible: true
  text: |
    package carsharing.controller.util;

    import carsharing.controller.util.menus.Menu;

    public class UtilManager implements Runnable {
        private Menu menu;
        private boolean shouldClosed;

        public UtilManager(Menu menu) {
            this.menu = menu;
        }

        @Override
        public void run() {

            while (!shouldClosed) {
                menu.display();
                menu.readInput();
                menu.performAction(this);
            }
        }

        public void switcher(Menu menu) {
            this.menu = menu;
        }

        public void close() {
            shouldClosed = true;
        }
    }
  learner_created: true
- name: src/carsharing/controller/util/menus/Menu.java
  visible: true
  text: |
    package carsharing.controller.util.menus;


    import carsharing.controller.util.UtilManager;

    public interface Menu {
        void display();
        void readInput();
        void performAction(UtilManager manager);
    }
  learner_created: true
- name: src/carsharing/controller/util/tasks/Switcher.java
  visible: true
  text: |-
    package carsharing.controller.util.tasks;

    import carsharing.controller.util.UtilManager;
    import carsharing.controller.util.menus.Menu;
    import lombok.AllArgsConstructor;

    @AllArgsConstructor
    public class Switcher implements Task {
        private final Menu nextMenu;

        @Override
        public void perform(UtilManager manager) {
            manager.switcher(nextMenu);
        }
    }
  learner_created: true
- name: src/carsharing/controller/util/tasks/Close.java
  visible: true
  text: |
    package carsharing.controller.util.tasks;

    import carsharing.controller.util.UtilManager;

    public class Close implements Task {
        @Override
        public void perform(UtilManager manager) {
            manager.close();
        }
    }
  learner_created: true
- name: src/carsharing/model/DataBase.java
  visible: true
  text: |
    package carsharing.model;

    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;

    public class DataBase {
        private static final String JDBC_DRIVER = "org.h2.Driver";
        private static final String DB_URL = "jdbc:h2:./src/carsharing/db/";
        private static DataBase INSTANCE;
        private final String dbFileName;

        private DataBase(String dbFileName) {
            this.dbFileName = dbFileName;
        }

        public static DataBase getInstance(String dbFileName) {
            if (INSTANCE == null) {
                INSTANCE = new DataBase(dbFileName);
            }
            return INSTANCE;
        }

        public static DataBase getInstance() {
            return INSTANCE;
        }

        public void initialize() throws ClassNotFoundException {
            Class.forName(JDBC_DRIVER);

            try (var connection = getConnection();
                 var statement = connection.createStatement()) {
                connection.setAutoCommit(true);

                final var COMPANY_DDL =
                        "CREATE TABLE IF NOT EXISTS " +
                        "COMPANY(" +
                        "ID INTEGER PRIMARY KEY AUTO_INCREMENT, " +
                        "NAME VARCHAR(30) UNIQUE NOT NULL )";
                statement.executeUpdate(COMPANY_DDL);

                final var CAR_DDL =
                        "CREATE TABLE IF NOT EXISTS " +
                        "CAR (" +
                        "ID INTEGER PRIMARY KEY AUTO_INCREMENT, " +
                        "NAME VARCHAR(30) UNIQUE NOT NULL, " +
                        "COMPANY_ID INTEGER NOT NULL , " +
                        "CONSTRAINT fk_company FOREIGN KEY(COMPANY_ID) REFERENCES COMPANY(ID))";
                statement.executeUpdate(CAR_DDL);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }

        public Connection getConnection() throws SQLException {
            return DriverManager.getConnection(DB_URL + dbFileName);
        }
    }
  learner_created: true
- name: src/carsharing/controller/util/menus/MenuImpl.java
  visible: true
  text: |
    package carsharing.controller.util.menus;

    import carsharing.controller.util.UtilManager;
    import carsharing.controller.util.tasks.Task;

    import java.util.Map;
    import java.util.Scanner;

    public class MenuImpl implements Menu{
        protected final String displayText;
        protected final Map<Integer, Task> map;
        protected Task currentTask;

        public MenuImpl(String displayText, Map<Integer, Task> map) {
            this.displayText = displayText;
            this.map = map;
        }

        public void display() {
            System.out.println(displayText);
        }

        public void readInput() {
            final int actionCode = new Scanner(System.in).nextInt();
            currentTask = map.get(actionCode);
        }

        public void performAction(UtilManager manager) {
            currentTask.perform(manager);
        }
    }
  learner_created: true
- name: src/carsharing/model/Customer.java
  visible: true
  learner_created: true
- name: src/carsharing/service/company/CompanyServiceImpl.java
  visible: true
  text: |
    package carsharing.service;

    import carsharing.dao.CompanyDao;
    import carsharing.model.Car;
    import carsharing.model.Company;
    import java.sql.SQLException;
    import java.util.List;

    public class ServiceImpl implements Services {
        private final CompanyDao dao;
        public ServiceImpl(CompanyDao dao) {
            this.dao = dao;
        }

        @Override
        public void add(String companyName) {

            try {
                dao.add(companyName);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }

        @Override
        public List<Company> getAll() {

            try {
                return dao.getAll();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }

        @Override
        public void addCar(Company company, String carName) {
            try {
                dao.addCar(company, carName);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }

        @Override
        public List<Car> getAllCars(Company company) {
            try {
                return dao.getAllCars(company);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/carsharing/service/company/CompanyServices.java
  visible: true
  text: |
    package carsharing.service;

    import carsharing.model.Car;
    import carsharing.model.Company;

    import java.util.List;

    public interface Services {

        void add(String companyName);

        List<Company> getAll();

        void addCar(Company company, String carName);

        List<Car> getAllCars(Company company);
    }
  learner_created: true
- name: src/carsharing/service/customer/CustomerService.java
  visible: true
  learner_created: true
- name: src/carsharing/service/customer/CustomerServiceImpl.java
  visible: true
  learner_created: true
- name: src/carsharing/dao/CustomerDao.java
  visible: true
  learner_created: true
- name: src/carsharing/controller/util/tasks/list/ListCompany.java
  visible: true
  text: |-
    package carsharing.controller.util.tasks;

    import carsharing.controller.Controller;
    import carsharing.controller.util.UtilManager;
    import carsharing.controller.util.menus.Menu;
    import carsharing.controller.util.menus.MenuImpl;
    import carsharing.model.Company;
    import carsharing.service.Services;
    import lombok.AllArgsConstructor;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    @AllArgsConstructor
    public class ListCompany implements Task {

        private final Services services;

        @Override
        public void perform(UtilManager manager) {
            final List<Company> companies = services.getAll();

            if (companies.isEmpty()) {
                System.out.println("The company list is empty!");
            } else {

                System.out.println("Choose the company:");
                StringBuilder chooseCompanyMenuTextBuilder = new StringBuilder();
                final Map<Integer, Task> chooseCompanyMenuTaskMap = new HashMap<>();

                for (int i = 1; i <= companies.size(); i++) {
                    Company company = companies.get(i - 1);
                    chooseCompanyMenuTaskMap
                            .put(i, new ChooseCompany(company, services));
                    chooseCompanyMenuTextBuilder
                            .append(String.format("%d. %s%n",
                                      i, company.getName()));
                }
                chooseCompanyMenuTextBuilder.append("0. Back");
                chooseCompanyMenuTaskMap.put(0,
                        new Switcher(Controller.getInstance().getManagerMenu()));
                Menu chooseCompanyMenu =
                        new MenuImpl(chooseCompanyMenuTextBuilder
                                                              .toString(),
                                                      chooseCompanyMenuTaskMap);
                manager.switcher(chooseCompanyMenu);
            }
        }
    }
  learner_created: true
- name: src/carsharing/controller/util/tasks/list/ListCar.java
  visible: true
  text: |
    package carsharing.controller.util.tasks;

    import carsharing.controller.util.UtilManager;
    import carsharing.model.Car;
    import carsharing.model.Company;
    import carsharing.service.Services;
    import lombok.AllArgsConstructor;

    import java.util.List;

    @AllArgsConstructor
    public class ListCar implements Task {
        private final Company company;
        private final Services services;

        @Override
        public void perform(UtilManager manager) {
            final List<Car> cars = services.getAllCars(company);

            if (cars.isEmpty()) {
                System.out.println("The car list is empty!");

            } else {
                System.out.println("Car list:");
                for (int i = 1; i <= cars.size(); i++) {
                    Car car = cars.get(i - 1);
                    System.out.printf("%d. %s%n", i, car.getName());
                }
                System.out.println();
            }
        }
    }
  learner_created: true
- name: src/carsharing/controller/util/tasks/list/ListCustomer.java
  visible: true
  learner_created: true
- name: src/carsharing/controller/util/tasks/create/CreateCar.java
  visible: true
  text: |
    package carsharing.controller.util.tasks;

    import carsharing.controller.util.UtilManager;
    import carsharing.model.Company;
    import carsharing.service.Services;
    import lombok.AllArgsConstructor;
    import java.util.Scanner;
    @AllArgsConstructor
    public class CreateCar implements Task {
        private final Company company;
        private final Services services;

        @Override
        public void perform(UtilManager manager) {

            System.out.println("Enter the car name:");
            final String carName = new Scanner(System.in).nextLine();
            services.addCar(company, carName);
            System.out.println("The car was added!");
        }
    }
  learner_created: true
- name: src/carsharing/controller/util/tasks/create/CreateCompany.java
  visible: true
  text: |
    package carsharing.controller.util.tasks;

    import carsharing.controller.util.UtilManager;
    import carsharing.service.Services;
    import lombok.AllArgsConstructor;
    import java.util.Scanner;

    @AllArgsConstructor
    public class CreateCompany implements Task {
        private final Services services;

        @Override
        public void perform(UtilManager manager) {

            System.out.println("Enter the company name:");
            final String companyName = new Scanner(System.in).nextLine();
            services.add(companyName);
            System.out.println("The company was created!");
        }
    }
  learner_created: true
- name: src/carsharing/controller/util/tasks/choose/ChooseCompany.java
  visible: true
  text: |-
    package carsharing.controller.util.tasks;

    import carsharing.controller.Controller;
    import carsharing.controller.util.menus.Menu;
    import carsharing.controller.util.menus.MenuImpl;
    import carsharing.controller.util.UtilManager;
    import carsharing.model.Company;
    import carsharing.service.Services;
    import lombok.AllArgsConstructor;
    import java.util.HashMap;
    import java.util.Map;

    @AllArgsConstructor
    public class ChooseCompany implements Task {
        private final Company company;
        private final Services services;

        @Override
        public void perform(UtilManager manager) {
            System.out.printf("'%s' company%n", company.getName());

            String companyMenuText = """
                    1. Car list
                    2. Create a car
                    0. Back""";
            Task backAction = new Switcher(Controller.getInstance().getManagerMenu());
            Task listCarAction = new ListCar
                    (company, services);
            Task createCarAction = new CreateCar(company, services);

            final Map<Integer, Task> companyMenuActionMap = new HashMap<>();
            companyMenuActionMap.put(1, listCarAction);
            companyMenuActionMap.put(2, createCarAction);
            companyMenuActionMap.put(0, backAction);
            Menu companyMenu = new MenuImpl(companyMenuText, companyMenuActionMap);
            manager.switcher(companyMenu);
        }
    }
  learner_created: true
- name: src/carsharing/controller/util/tasks/choose/ChooseCustomer.java
  visible: true
  learner_created: true
- name: src/carsharing/controller/util/tasks/create/CreateCustomer.java
  visible: true
  learner_created: true
- name: src/carsharing/controller/util/tasks/list/ListRentCar.java
  visible: true
  learner_created: true
- name: src/carsharing/controller/util/tasks/Rent.java
  visible: true
  learner_created: true
- name: src/carsharing/controller/util/tasks/Return.java
  visible: true
  learner_created: true
- name: src/carsharing/controller/util/tasks/list/ListRentCompany.java
  visible: true
  learner_created: true
- name: src/carsharing/controller/util/tasks/YourCar.java
  visible: true
  learner_created: true
- name: src/carsharing/dao/CarDao.java
  visible: true
  learner_created: true
- name: src/carsharing/dao/jdbc/JDBCCompanyDao.java
  visible: true
  text: |-
    package carsharing.dao;

    import carsharing.model.Car;
    import carsharing.model.Company;
    import carsharing.model.DataBase;
    import java.sql.SQLException;
    import java.util.ArrayList;
    import java.util.List;

    public class JDBCDao implements CompanyDao {
        private static final JDBCDao INSTANCE = new JDBCDao();
        private static final String INSERT_COMPANY_STATEMENT =
                "INSERT INTO COMPANY(NAME) VALUES (?)";
        private static final String QUERY_FIND_ALL_COMPANY = "SELECT * from COMPANY";
        private static final String INSERT_CAR_STATEMENT =
                "INSERT INTO CAR(NAME,COMPANY_ID) VALUES (?,?)";
        private static final String QUERY_FIND_ALL_CAR =
                "SELECT * FROM CAR WHERE COMPANY_ID = ? ORDER BY ID";
        private final DataBase database;

        private JDBCDao() {
            database = DataBase.getInstance();
        }

        public static CompanyDao getInstance() {
            return INSTANCE;
        }

        @Override
        public void add(String companyName) throws SQLException {

            try (var connection = database.getConnection();
                 final var statement =
                         connection.prepareStatement(INSERT_COMPANY_STATEMENT)) {
                statement.setString(1, companyName);
                statement.executeUpdate();
            }
        }

        @Override
        public List<Company> getAll() throws SQLException {
            List<Company> companies = new ArrayList<>();
            try (var connection = database.getConnection();
                 final var statement =
                         connection.prepareStatement(QUERY_FIND_ALL_COMPANY);
                 final var resultSet = statement.executeQuery()
            ) {
                while (resultSet.next()) {
                    int id = resultSet.getInt("ID");
                    String name = resultSet.getString("NAME");
                    companies.add(new Company(id, name));
                }
            }
            return companies;
        }

        @Override
        public void addCar(Company company, String carName) throws SQLException {
            try (var connection = database.getConnection();
                 final var statement =
                         connection.prepareStatement(INSERT_CAR_STATEMENT)) {
                statement.setString(1, carName);
                statement.setInt(2, company.getId());
                statement.executeUpdate();
            }
        }

        @Override
        public List<Car> getAllCars(Company company) throws SQLException {
            List<Car> cars = new ArrayList<>();
            try (var connection = database.getConnection();
                 final var statement =
                         connection.prepareStatement(QUERY_FIND_ALL_CAR)
            ) {
                statement.setInt(1,company.getId());
                final var resultSet = statement.executeQuery();

                while (resultSet.next()) {
                    var id = resultSet.getInt("ID");
                    var name = resultSet.getString("NAME");
                    cars.add(new Car(id, name));
                }
            }
            return cars;
        }
    }
  learner_created: true
- name: src/carsharing/dao/jdbc/JDBCCarDao.java
  visible: true
  learner_created: true
- name: src/carsharing/dao/jdbc/JDBCCustomerDao.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11504#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 29 Aug 2022 05:19:52 UTC
record: 4
